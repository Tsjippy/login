{"version":3,"file":"qr_code_login.min.js","mappings":"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","sources":["webpack://login/./partials/shared.js","webpack://login/./partials/webauth.js","webpack://login/./qr_code_login.js"],"sourcesContent":["export function closeMobileMenu(){\r\n\t//close mobile menu\r\n\tdocument.querySelectorAll('#site-navigation, #mobile-menu-control-wrapper').forEach(el=>el.classList.remove('toggled'));\r\n\tdocument.querySelector('body').classList.remove('mobile-menu-open');\r\n\tdocument.querySelectorAll(\"#mobile-menu-control-wrapper > button\").forEach(el=>el.ariaExpanded = 'false');\r\n}\r\n\r\n// Decodes a Base64Url string\r\nconst base64UrlDecode = (input) => {\r\ninput = input\r\n\t.replace(/-/g, '+')\r\n\t.replace(/_/g, '/');\r\n\r\nconst pad = input.length % 4;\r\nif (pad) {\r\n\tif (pad === 1) {\r\n\tthrow new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\r\n\t}\r\n\tinput += new Array(5-pad).join('=');\r\n}\r\n\r\nreturn window.atob(input);\r\n};\r\n\r\n// Converts an array of bytes into a Base64Url string\r\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\r\n\r\n// Prepares the public key options object returned by the Webauthn Framework\r\nexport const preparePublicKeyOptions = publicKey => {\r\n\t//Convert challenge from Base64Url string to Uint8Array\r\n\tpublicKey.challenge = Uint8Array.from(\r\n\t\tbase64UrlDecode(publicKey.challenge),\r\n\t\tc => c.charCodeAt(0)\r\n\t);\r\n\r\n\t//Convert the user ID from Base64 string to Uint8Array\r\n\tif (publicKey.user !== undefined) {\r\n\t\tpublicKey.user = {\r\n\t\t...publicKey.user,\r\n\t\tid: Uint8Array.from(\r\n\t\t\twindow.atob(publicKey.user.id),\r\n\t\t\tc => c.charCodeAt(0)\r\n\t\t),\r\n\t\t};\r\n\t}\r\n\r\n\t//If excludeCredentials is defined, we convert all IDs to Uint8Array\r\n\tif (publicKey.excludeCredentials !== undefined) {\r\n\t\tpublicKey.excludeCredentials = publicKey.excludeCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif (publicKey.allowCredentials !== undefined) {\r\n\t\tpublicKey.allowCredentials = publicKey.allowCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKey;\r\n};\r\n\r\n// Prepares the public key credentials object returned by the authenticator\r\nexport const preparePublicKeyCredentials = data => {\r\n\tconst publicKeyCredential = {\r\n\t\tid: data.id,\r\n\t\ttype: data.type,\r\n\t\trawId: arrayToBase64String(new Uint8Array(data.rawId)),\r\n\t\tresponse: {\r\n\t\tclientDataJSON: arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.clientDataJSON)\r\n\t\t),\r\n\t\t},\r\n\t};\r\n\r\n\tif (data.response.attestationObject !== undefined) {\r\n\t\tpublicKeyCredential.response.attestationObject = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.attestationObject)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.authenticatorData !== undefined) {\r\n\t\tpublicKeyCredential.response.authenticatorData = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.authenticatorData)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.signature !== undefined) {\r\n\t\tpublicKeyCredential.response.signature = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.signature)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.userHandle !== undefined) {\r\n\t\tpublicKeyCredential.response.userHandle = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.userHandle)\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKeyCredential;\r\n};\r\n\r\nexport function showMessage(message, type=''){\r\n\tlet el = document.querySelector(\"#message\");\r\n\tel.innerHTML= DOMPurify.sanitize(message);\r\n\r\n\tel.classList.remove('success');\r\n\tel.classList.remove('warning');\r\n\tel.classList.remove('error');\r\n\r\n\tif(type == 'success'){\r\n\t\tel.classList.add('success');\r\n\t}\r\n\r\n\tif(type == 'warning'){\r\n\t\tel.classList.add('warning');\r\n\t}\r\n\r\n\tif(type == 'error'){\r\n\t\tel.classList.add('error');\r\n\t}\r\n}\r\n\r\n//show loader\r\nexport async function requestLogin(){\r\n\t//hide everything\r\n\tdocument.querySelectorAll('.authenticator-wrapper:not(.hidden)').forEach(el=>{\r\n\t\tel.classList.add('hidden');\r\n\t\tel.classList.add('current-method');\r\n\t});\r\n\t\r\n\t//show login message\r\n\tdocument.getElementById('logging-in-wrapper').classList.remove('hidden');\r\n\r\n\tlet form \t\t= document.getElementById('loginform');\r\n\tlet formData\t= new FormData(form);\r\n\tform.querySelectorAll('.hidden [required]').forEach(el=>{el.required = false});\r\n\tlet validity\t= form.reportValidity();\r\n\t//if not valid return\r\n\tif(!validity){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tawait Main.waitForInternet();\r\n\r\n\tlet response\t= await FormSubmit.fetchRestApi('login/request_login', formData);\r\n\r\n\tif(response){\r\n\t\tconsole.log(response);\r\n\t\t// We are logging in from an iframe\r\n\t\tif(window.self !== window.top){\r\n\r\n\t\t\t// change message\r\n\t\t\tconsole.log(window.parent.document.getElementById('iframe-loader'));\r\n\t\t\tconsole.log(window.parent.document);\r\n\t\t\tconsole.log(window.parent);\r\n\t\t\twindow.parent.document.getElementById('iframe-loader').textContent\t= 'Succesfully logged in, you may now close this popup';\r\n\r\n\t\t\t// Refresh the rest api nonce\r\n\t\t\twindow.parent.sim.restNonce\t= response.nonce;\r\n\r\n\t\t\t// Update user id\r\n\t\t\twindow.parent.sim.userId\t= response.id;\r\n\r\n\t\t\tconsole.log(window.parent.document.getElementById('iframe-loader'));\r\n\r\n\t\t\t// close all iframes\r\n\t\t\twindow.parent.document.querySelectorAll('iframe').forEach(el=>el.remove());\r\n\t\t}else{\r\n\t\t\tdocument.querySelector('#logging-in-wrapper .status-message').textContent='Succesfully logged in, redirecting...';\r\n\r\n\t\t\tif(response.redirect == ''){\r\n\t\t\t\t// refresh the page\r\n\t\t\t\tlocation.reload();\r\n\t\t\t}else{\r\n\t\t\t\t// go to the redirect page\r\n\t\t\t\tlocation.href = response.redirect;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}else{\r\n\t\tdocument.getElementById('logging-in-wrapper').classList.add('hidden');\r\n\r\n\t\tdocument.querySelector('.current-method').classList.remove('hidden');\r\n\r\n\t\treturn false;\r\n\t}\r\n}","import {\r\n    preparePublicKeyCredentials,\r\n    preparePublicKeyOptions,\r\n\tshowMessage,\r\n\trequestLogin\r\n} from './shared.js';\r\n\r\nlet credParsing\t\t\t        = false;\r\nlet abortController;\r\n\r\nwindow.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(\r\n\tresult => {\r\n\t  if (!result) {\r\n\t\tconsole.log(\"No platform authenticator found. If your OS does not come with one, try using devtools to set one up.\");\r\n\t  }\r\n\t}\r\n);\r\n\r\n/**\r\n * \r\n * @param {string} username The user name to authenticate\r\n * @param {*} messageEl the html onject to display messages in\r\n */\r\nexport async function webAuthVerification(username, messageEl=null){\r\n\tif(messageEl != null){\r\n\t\tmessageEl.classList.remove('success');\r\n\t\tmessageEl.classList.remove('error');\r\n\t}\r\n\r\n\ttry{\r\n\t\t// Get the challenge\r\n\t\tlet formData\t\t\t= new FormData();\r\n\t\tformData.append('username', username);\r\n\r\n\t\tlet response\t\t\t= await FormSubmit.fetchRestApi('login/auth_start', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Fetching Server Challenge failed');\r\n\t\t}\r\n\r\n\t\tlet publicKey\t\t\t= preparePublicKeyOptions(response);\r\n\r\n\t\t// Update message\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Waiting for biometric';\r\n\t\t}\r\n\r\n\t\t// Verify on device\r\n\t\tlet credentials\t\t\t= await navigator.credentials.get({\tpublicKey });\r\n\r\n\t\t// Update message\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Verifying...';\r\n\t\t}\r\n\r\n\t\t// Verify on the server\r\n\t\tconst publicKeyCredential \t= preparePublicKeyCredentials(credentials);\r\n\t\tlet form \t\t\t\t\t= document.getElementById('loginform') ? document.getElementById('loginform') : undefined;\r\n\t\tformData\t\t\t\t\t= new FormData(form);\r\n\t\tformData.append('publicKeyCredential', JSON.stringify(publicKeyCredential));\r\n\t\tresponse\t\t\t\t\t= await FormSubmit.fetchRestApi('login/auth_finish', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Verification failed');\r\n\t\t}\r\n\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Verification successfull';\r\n\t\t\tmessageEl.classList.add('success');\r\n\t\t}else{\r\n\t\t\tMain.displayMessage('Verification successfull');\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}catch(error){\r\n\t\tconsole.error(error);\r\n\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= error;\r\n\t\t\tmessageEl.classList.add('error');\r\n\t\t}else{\r\n\t\t\tMain.displayMessage(error, 'error');\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n// Send request to start webauthn\r\nexport async function verifyWebauthn(methods){\t\r\n\t//show webauthn messages\r\n\tdocument.getElementById('webauthn-wrapper').classList.remove('hidden');\r\n\r\n\tlet username\t= document.getElementById('username').value;\r\n\r\n\ttry{\r\n\t\tlet result\t= await webAuthVerification(username, document.querySelector('#webauthn-wrapper .status-message'));\r\n\r\n\t\tif(!result){\r\n\t\t\tthrow new Error( 'Webauthentication failed' );\r\n\t\t}\r\n\r\n\t\t//authentication success\r\n\t\tawait requestLogin();\r\n\t}catch (error){\r\n\t\tif(document.getElementById('logging-in-wrapper').classList.add('hidden'));\r\n\r\n\t\t//authentication failed\r\n\t\tdocument.querySelector('#webauthn-wrapper').classList.add('hidden');\r\n\r\n\t\tlet response\t= await FormSubmit.fetchRestApi('login/mark_bio_as_failed', '', false);\r\n\t\t\r\n\t\tconsole.log(response);\r\n\r\n\t\tif(methods.length == 1){\r\n\t\t\tshowMessage('Authentication failed, please setup an additional login factor.', 'error');\r\n\t\t\trequestLogin();\r\n\t\t}else{\r\n\t\t\tconsole.error(error);\r\n\t\t\tvar message;\r\n\t\t\tif(error['message'] == \"No authenticator available\"){\r\n\t\t\t\tmessage = \"No biometric login for this device found. <br>Give verification code.\";\r\n\t\t\t}else{\r\n\t\t\t\tmessage = 'Web authentication failed, please give verification code.';\r\n\t\t\t}\r\n\t\t\tshowMessage(message, 'error');\r\n\r\n\t\t\t//Show other 2fa fields\r\n\t\t\tshowTwoFaFields(methods);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Request email code for 2fa login\r\nexport async function requestEmailCode(){\r\n\t//add new one\r\n\tlet loader\t\t\t\t= Main.showLoader(null, false, 50, '', true);\r\n\tshowMessage(`Sending e-mail... ${loader}`);\r\n\r\n\tlet username\t= document.getElementById('username').value;\r\n\tlet formData\t= new FormData();\r\n\tformData.append('username',username);\r\n\r\n\tlet response\t= await FormSubmit.fetchRestApi('login/request_email_code', formData, false);\r\n\t\r\n\tif(response){\r\n\t\tshowMessage(response, 'success');\r\n\t}else{\r\n\t\tshowMessage(`Sending e-mail failed`, 'error');\r\n\t}\r\n}\r\n\r\nexport async function processCredential(credential){\r\n\tif(credParsing){\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (credential) {\r\n\t\tcredParsing\t= true;\r\n\t\tlet username = String.fromCodePoint(...new Uint8Array(credential.response.userHandle));\r\n\r\n\t\tdocument.querySelector('#webauthn-wrapper .status-message').textContent='Verifying credentials...';\r\n\r\n\t\t// Verify on the server\r\n\t\tconst publicKeyCredential \t= preparePublicKeyCredentials(credential);\r\n\t\tlet formData\t\t\t\t= new FormData(document.getElementById('loginform'));\r\n\t\tformData.append('publicKeyCredential', JSON.stringify(publicKeyCredential));\r\n\t\tlet response\t\t\t\t= await FormSubmit.fetchRestApi('login/auth_finish', formData, false);\r\n\r\n\t\tif(response){\r\n\t\t\tshowMessage('Passkey login succesfull', 'success');\r\n\t\t}else{\r\n\t\t\tdocument.querySelector('#webauthn-wrapper .status-message').textContent='Please authenticate';\r\n\r\n\t\t\tdocument.querySelectorAll('#usercred-wrapper').forEach(el=>el.classList.remove('hidden'));\r\n\t\t\tdocument.querySelectorAll('#webauthn-wrapper').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t\t\tshowMessage('Passkey login failed, try using your username and password', 'error');\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//authentication success\r\n\t\treturn await requestLogin();\r\n\r\n\t} else {\r\n\t\tconsole.log(\"Credential returned null\");\r\n\r\n\t\tdocument.getElementById('usercred-wrapper').classList.remove('hidden');\r\n\t\tdocument.getElementById('webauthn-wrapper').classList.add('hidden');\r\n\r\n\t\tshowMessage('Passkey login failed', 'error');\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport let startConditionalRequest = async (mediation) => {\r\n\tif (window.PublicKeyCredential && PublicKeyCredential.isConditionalMediationAvailable) {\r\n\t\tconsole.log(\"Conditional UI is understood by the browser\");\r\n\t\tif (!await window.PublicKeyCredential.isConditionalMediationAvailable()) {\r\n\t\t\tconsole.log(\"Conditional UI is understood by your browser but not available\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t} else {\r\n\t\tif (!navigator.credentials.conditionalMediationSupported) {\r\n\t\t\tconsole.log(\"Your browser does not implement Conditional UI (are you running the right chrome/safari version with the right flags?)\");\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"This browser understand the old version of Conditional UI feature detection\");\r\n\t\t}\r\n\t}\r\n\r\n\tif(abortController != undefined){\r\n\t\tconsole.log('Cancelling previous request');\r\n\t\tabortController.abort('aborted');\r\n\t}\r\n\t\r\n\tabortController\t= new AbortController();\r\n\t\t\r\n\tabortController.onAbort\t= function(ev){\r\n\t\tconsole.log(ev);\r\n\t}\r\n\tabortController.signal.onAbort\t= function(ev){\r\n\t\tconsole.log(ev);\r\n\t}\r\n\r\n\tif(mediation != 'conditional'){\r\n\t\tdocument.getElementById('usercred-wrapper').classList.add('hidden');\r\n\t\tdocument.getElementById('webauthn-wrapper').classList.remove('hidden');\r\n\r\n\t\tshowMessage('Performing passkey login');\r\n\t}\r\n\r\n\tlet usercredWrapper\t= document.getElementById('usercred-wrapper');\r\n\r\n\ttry {\r\n\t\tlet formData\t\t\t= new FormData();\r\n\t\tformData.append('username', '');\r\n\r\n\t\tlet response\t\t\t= await FormSubmit.fetchRestApi('login/auth_start', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('auth_start failed');\r\n\t\t}\r\n\r\n\t\tlet publicKey\t\t\t= preparePublicKeyOptions(response);\r\n\r\n\t\tlet credential = await navigator.credentials.get({\r\n\t\t\tsignal: abortController.signal,\r\n\t\t\tpublicKey: {\r\n\t\t\t\tchallenge: publicKey.challenge\r\n\t\t\t},\r\n\t\t\t//mediation: 'silent',\r\n\t\t\t//mediation: 'conditional',\r\n\t\t\t//mediation: 'required',\r\n\t\t\tmediation: mediation\r\n\t\t});\r\n\r\n\t\tif(mediation == 'conditional'){\t\r\n\t\t\tusercredWrapper.classList.add('hidden');\r\n\t\t\tdocument.getElementById('webauthn-wrapper').classList.remove('hidden');\r\n\t\r\n\t\t\tshowMessage('Performing passkey login');\r\n\t\t}\r\n\t\t\r\n\t\treturn await processCredential(credential);\r\n\t} catch (error) {\r\n\t\tif (error == \"aborted\") {\r\n\t\t\tconsole.log(\"request aborted\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(error.message.includes('A request is already pending.')){\r\n\t\t\tstartConditionalRequest(mediation);\r\n\t\t}\r\n\r\n\t\t// only do when login modal is open\r\n\t\tif(usercredWrapper != null){\r\n\t\t\tusercredWrapper.classList.remove('hidden');\r\n\t\t\tdocument.getElementById('webauthn-wrapper').classList.add('hidden');\r\n\r\n\t\t\tshowMessage('Passkey login failed, try using your username and password', 'error');\r\n\t\t}\r\n\r\n\t\tconsole.log(error);\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport async function checkWebauthnAvailable(){\r\n\tlet webauthnSupported\t= false;\r\n\t\r\n\tif (window.PublicKeyCredential) {\r\n\t\tlet available\t= await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n\t\tif (available) {\r\n\t\t\twebauthnSupported = true;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"WebAuthn supported, Platform Authenticator not supported.\");\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.log(\"Not supported.\");\r\n\t}\r\n\r\n\treturn webauthnSupported;\r\n}\r\n\r\n// Display the form for the 2fa email or authenticator code\r\nexport function showTwoFaFields(methods){\r\n\tif(methods.includes('email')){\r\n\t\trequestEmailCode();\r\n\t}\r\n\r\n\t//show 2fa fields\r\n\tfor(const element of methods){\r\n\t\tif(element == 'webauthn'){\r\n\t\t\t//do not show webauthn\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar wrapper\t= document.getElementById(element+'_wrapper');\r\n\t\tif(wrapper != null){\r\n\t\t\twrapper.classList.remove('hidden');\r\n\t\t\twrapper.querySelectorAll('input').forEach(el=>window.setTimeout(() => el.focus(), 0));\r\n\t\t}\r\n\t}\r\n\r\n\t//enable login button\r\n\tdocument.querySelector(\"#login-button\").disabled\t\t\t= '';\r\n\t//show login button\r\n\tdocument.querySelector('#submit-login-wrapper').classList.remove('hidden');\r\n}","import {webAuthVerification} from './partials/webauth.js';\r\n\r\nconsole.log('Qr code login loaded');\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async function() {\r\n    if(await webAuthVerification(sim.userId, document.getElementById('message'))){\r\n        document.querySelector('main').innerHTML = `You can close this window now.<br><br> You will be redirected to the home page automatically in <span id=\"countdown\">6</span> seconds.`;\r\n        setInterval(function(){\r\n            let counter = document.getElementById('countdown');\r\n\r\n            let value   = parseInt(counter.textContent);\r\n\r\n            // close the tab\r\n            if(value < 1){\r\n                location.href   =   sim.baseUrl+'?message=Login%20succesfully%20aproved';\r\n            }else{\r\n                value--;\r\n\r\n                counter.textContent = value;\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    document.querySelectorAll('.loader-wrapper').forEach(el=>el.classList.add('hidden'));\r\n});"],"names":["base64UrlDecode","input","pad","replace","length","Error","Array","join","window","atob","arrayToBase64String","a","btoa","String","fromCharCode","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","then","result","console","log","document","addEventListener","async","username","messageEl","classList","remove","formData","FormData","append","response","FormSubmit","fetchRestApi","publicKey","challenge","Uint8Array","from","c","charCodeAt","undefined","user","id","excludeCredentials","map","data","allowCredentials","textContent","credentials","navigator","get","publicKeyCredential","type","rawId","clientDataJSON","attestationObject","authenticatorData","signature","userHandle","form","getElementById","JSON","stringify","add","Main","displayMessage","error","webAuthVerification","sim","userId","querySelector","innerHTML","setInterval","counter","value","parseInt","location","href","baseUrl","querySelectorAll","forEach","el"],"sourceRoot":""}