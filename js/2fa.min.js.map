{"version":3,"file":"2fa.min.js","mappings":"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","sources":["webpack://login/./partials/shared.js","webpack://login/./partials/webauth.js","webpack://login/./2fa.js"],"sourcesContent":["export function closeMobileMenu(){\r\n\t//close mobile menu\r\n\tdocument.querySelectorAll('#site-navigation, #mobile-menu-control-wrapper').forEach(el=>el.classList.remove('toggled'));\r\n\tdocument.querySelector('body').classList.remove('mobile-menu-open');\r\n\tdocument.querySelectorAll(\"#mobile-menu-control-wrapper > button\").forEach(el=>el.ariaExpanded = 'false');\r\n}\r\n\r\n// Decodes a Base64Url string\r\nconst base64UrlDecode = (input) => {\r\ninput = input\r\n\t.replace(/-/g, '+')\r\n\t.replace(/_/g, '/');\r\n\r\nconst pad = input.length % 4;\r\nif (pad) {\r\n\tif (pad === 1) {\r\n\tthrow new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\r\n\t}\r\n\tinput += new Array(5-pad).join('=');\r\n}\r\n\r\nreturn window.atob(input);\r\n};\r\n\r\n// Converts an array of bytes into a Base64Url string\r\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\r\n\r\n// Prepares the public key options object returned by the Webauthn Framework\r\nexport const preparePublicKeyOptions = publicKey => {\r\n\t//Convert challenge from Base64Url string to Uint8Array\r\n\tpublicKey.challenge = Uint8Array.from(\r\n\t\tbase64UrlDecode(publicKey.challenge),\r\n\t\tc => c.charCodeAt(0)\r\n\t);\r\n\r\n\t//Convert the user ID from Base64 string to Uint8Array\r\n\tif (publicKey.user !== undefined) {\r\n\t\tpublicKey.user = {\r\n\t\t...publicKey.user,\r\n\t\tid: Uint8Array.from(\r\n\t\t\twindow.atob(publicKey.user.id),\r\n\t\t\tc => c.charCodeAt(0)\r\n\t\t),\r\n\t\t};\r\n\t}\r\n\r\n\t//If excludeCredentials is defined, we convert all IDs to Uint8Array\r\n\tif (publicKey.excludeCredentials !== undefined) {\r\n\t\tpublicKey.excludeCredentials = publicKey.excludeCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif (publicKey.allowCredentials !== undefined) {\r\n\t\tpublicKey.allowCredentials = publicKey.allowCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKey;\r\n};\r\n\r\n// Prepares the public key credentials object returned by the authenticator\r\nexport const preparePublicKeyCredentials = data => {\r\n\tconst publicKeyCredential = {\r\n\t\tid: data.id,\r\n\t\ttype: data.type,\r\n\t\trawId: arrayToBase64String(new Uint8Array(data.rawId)),\r\n\t\tresponse: {\r\n\t\tclientDataJSON: arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.clientDataJSON)\r\n\t\t),\r\n\t\t},\r\n\t};\r\n\r\n\tif (data.response.attestationObject !== undefined) {\r\n\t\tpublicKeyCredential.response.attestationObject = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.attestationObject)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.authenticatorData !== undefined) {\r\n\t\tpublicKeyCredential.response.authenticatorData = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.authenticatorData)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.signature !== undefined) {\r\n\t\tpublicKeyCredential.response.signature = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.signature)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.userHandle !== undefined) {\r\n\t\tpublicKeyCredential.response.userHandle = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.userHandle)\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKeyCredential;\r\n};\r\n\r\nexport function showMessage(message){\r\n\tdocument.querySelector(\"#login_wrapper .message\").innerHTML= DOMPurify.sanitize(message);\r\n}","import {\r\n    preparePublicKeyCredentials,\r\n    preparePublicKeyOptions,\r\n\tshowMessage\r\n} from './shared.js';\r\n\r\nlet credParsing\t\t\t        = false;\r\nlet abortController;\r\nexport let webauthnSupported\t= false;\r\n\r\nwindow.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(\r\n\tresult => {\r\n\t  if (!result) {\r\n\t\tconsole.log(\"No platform authenticator found. If your OS does not come with one, try using devtools to set one up.\");\r\n\t  }\r\n\t}\r\n);\r\n\r\n/**\r\n * \r\n * @param {string} username The user name to authenticate\r\n * @param {*} messageEl the html onject to display messages in\r\n */\r\nexport async function webAuthVerification(username, messageEl){\r\n\tmessageEl.classList.remove('success');\r\n\tmessageEl.classList.remove('error');\r\n\ttry{\r\n\t\t// Get the challenge\r\n\t\tlet formData\t\t\t= new FormData();\r\n\t\tformData.append('username', username);\r\n\r\n\t\tlet response\t\t\t= await FormSubmit.fetchRestApi('login/auth_start', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Fetching Server Challenge failed');\r\n\t\t}\r\n\r\n\t\tlet publicKey\t\t\t= preparePublicKeyOptions(response);\r\n\r\n\t\t// Update message\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Waiting for biometric';\r\n\t\t}\r\n\r\n\t\t// Verify on device\r\n\t\tlet credentials\t\t\t= await navigator.credentials.get({\tpublicKey });\r\n\r\n\t\t// Update message\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Verifying...';\r\n\t\t}\r\n\r\n\t\t// Verify on the server\r\n\t\tconst publicKeyCredential \t= preparePublicKeyCredentials(credentials);\r\n\t\tformData\t\t\t\t\t= new FormData();\r\n\t\tformData.append('publicKeyCredential', JSON.stringify(publicKeyCredential));\r\n\t\tresponse\t\t\t\t\t= await FormSubmit.fetchRestApi('login/auth_finish', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Verification failed');\r\n\t\t}\r\n\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= 'Verification successfull';\r\n\t\t\tmessageEl.classList.add('success');\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}catch(error){\r\n\t\tif(messageEl != null){\r\n\t\t\tmessageEl.textContent\t= error;\r\n\t\t\tmessageEl.classList.add('error');\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n// Send request to start webauthn\r\nexport async function verifyWebauthn(methods){\t\r\n\t//show webauthn messages\r\n\tdocument.getElementById('webauthn_wrapper').classList.remove('hidden');\r\n\r\n\tlet username\t= document.getElementById('username').value;\r\n\r\n\ttry{\r\n\t\twebAuthVerification(username, document.querySelector('#webauthn_wrapper .status_message'));\r\n\r\n\t\t//authentication success\r\n\t\trequestLogin();\r\n\t}catch (error){\r\n\t\tif(document.getElementById('logging_in_wrapper').classList.add('hidden'));\r\n\r\n\t\t//authentication failed\r\n\t\tdocument.querySelector('#webauthn_wrapper').classList.add('hidden');\r\n\r\n\t\tif(methods.length == 1){\r\n\t\t\tshowMessage('Authentication failed, please setup an additional login factor.');\r\n\t\t\trequestLogin();\r\n\t\t}else{\r\n\t\t\tvar message;\r\n\t\t\tif(error['message'] == \"No authenticator available\"){\r\n\t\t\t\tmessage = \"No biometric login for this device found. <br>Give verification code.\";\r\n\t\t\t}else{\r\n\t\t\t\tmessage = 'Web authentication failed, please give verification code.';\r\n\t\t\t\tmessage += '<button type=\"button\" class=\"button small\" id=\"retry_webauthn\" style=\"float:right;margin-top:-20px;\">Retry</button>';\r\n\t\t\t\tconsole.error('Authentication failure: '+error['message']);\r\n\t\t\t}\r\n\t\t\tshowMessage(message);\r\n\r\n\t\t\t//Show other 2fa fields\r\n\t\t\tshowTwoFaFields(methods);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Request email code for 2fa login\r\nexport async function requestEmailCode(){\r\n\t//add new one\r\n\tvar loader\t\t\t\t= \"<img id='loader' src='\"+sim.loadingGif+\"' style='height:30px;margin-top:-6px;float:right;'>\";\r\n\tshowMessage(`Sending e-mail... ${loader}`);\r\n\r\n\tvar username\t= document.getElementById('username').value;\r\n\tvar formData\t= new FormData();\r\n\tformData.append('username',username);\r\n\r\n\tvar response\t= await FormSubmit.fetchRestApi('login/request_email_code', formData, false);\r\n\t\r\n\tif(response){\r\n\t\tshowMessage(response);\r\n\t}else{\r\n\t\tshowMessage(`Sending e-mail failed`);\r\n\t}\r\n}\r\n\r\nexport async function processCredential(credential){\r\n\tif(credParsing){\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (credential) {\r\n\t\tcredParsing\t= true;\r\n\t\tlet username = String.fromCodePoint(...new Uint8Array(credential.response.userHandle));\r\n\r\n\t\tdocument.querySelector('#webauthn_wrapper .status_message').textContent='Verifying credentials...';\r\n\r\n\t\t// Verify on the server\r\n\t\tconst publicKeyCredential \t= preparePublicKeyCredentials(credential);\r\n\t\tlet formData\t\t\t\t= new FormData();\r\n\t\tformData.append('publicKeyCredential', JSON.stringify(publicKeyCredential));\r\n\t\tlet response\t\t\t\t= await FormSubmit.fetchRestApi('login/auth_finish', formData, false);\r\n\r\n\t\tif(response){\r\n\t\t\tshowMessage('Passkey login succesfull');\r\n\t\t}else{\r\n\t\t\tdocument.querySelector('#webauthn_wrapper .status_message').textContent='Please authenticate';\r\n\r\n\t\t\tdocument.querySelectorAll('#usercred_wrapper').forEach(el=>el.classList.remove('hidden'));\r\n\t\t\tdocument.querySelectorAll('#webauthn_wrapper').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t\t\tshowMessage('Passkey login failed, try using your username and password');\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//authentication success\r\n\t\treturn await requestLogin();\r\n\r\n\t} else {\r\n\t\tconsole.log(\"Credential returned null\");\r\n\r\n\t\tdocument.getElementById('usercred_wrapper').classList.remove('hidden');\r\n\t\tdocument.getElementById('webauthn_wrapper').classList.add('hidden');\r\n\r\n\t\tshowMessage('Passkey login failed');\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport let startConditionalRequest = async (mediation) => {\r\n\tif (window.PublicKeyCredential && PublicKeyCredential.isConditionalMediationAvailable) {\r\n\t\tconsole.log(\"Conditional UI is understood by the browser\");\r\n\t\tif (!await window.PublicKeyCredential.isConditionalMediationAvailable()) {\r\n\t\t\tconsole.log(\"Conditional UI is understood by your browser but not available\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t} else {\r\n\t\tif (!navigator.credentials.conditionalMediationSupported) {\r\n\t\t\tconsole.log(\"Your browser does not implement Conditional UI (are you running the right chrome/safari version with the right flags?)\");\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"This browser understand the old version of Conditional UI feature detection\");\r\n\t\t}\r\n\t}\r\n\r\n\tif(abortController != undefined){\r\n\t\tabortController.abort('aborted');\r\n\t}\r\n\t\r\n\tabortController\t= new AbortController();\r\n\t\t\r\n\tabortController.onAbort\t= function(ev){\r\n\t\tconsole.log(ev);\r\n\t}\r\n\tabortController.signal.onAbort\t= function(ev){\r\n\t\tconsole.log(ev);\r\n\t}\r\n\r\n\tif(mediation != 'conditional'){\r\n\t\tdocument.getElementById('usercred_wrapper').classList.add('hidden');\r\n\t\tdocument.getElementById('webauthn_wrapper').classList.remove('hidden');\r\n\r\n\t\tshowMessage('Performing passkey login');\r\n\t}\r\n\r\n\tlet usercredWrapper\t= document.getElementById('usercred_wrapper');\r\n\r\n\ttry {\r\n\t\tlet formData\t\t\t= new FormData();\r\n\t\tformData.append('username', '');\r\n\r\n\t\tlet response\t\t\t= await FormSubmit.fetchRestApi('login/auth_start', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('auth_start failed');\r\n\t\t}\r\n\r\n\t\tlet publicKey\t\t\t= preparePublicKeyOptions(response);\r\n\r\n\t\tlet credential = await navigator.credentials.get({\r\n\t\t\tsignal: abortController.signal,\r\n\t\t\tpublicKey: {\r\n\t\t\t\tchallenge: publicKey.challenge\r\n\t\t\t},\r\n\t\t\t//mediation: 'silent',\r\n\t\t\t//mediation: 'conditional',\r\n\t\t\t//mediation: 'required',\r\n\t\t\tmediation: mediation\r\n\t\t});\r\n\r\n\t\tif(mediation == 'conditional'){\t\r\n\t\t\tusercredWrapper.classList.add('hidden');\r\n\t\t\tdocument.getElementById('webauthn_wrapper').classList.remove('hidden');\r\n\t\r\n\t\t\tshowMessage('Performing passkey login');\r\n\t\t}\r\n\t\t\r\n\t\treturn await processCredential(credential);\r\n\t} catch (error) {\r\n\t\tif (error == \"aborted\") {\r\n\t\t\tconsole.log(\"request aborted\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(error.message.includes('A request is already pending.')){\r\n\t\t\tstartConditionalRequest(mediation);\r\n\t\t}\r\n\r\n\t\t// only do when login modal is open\r\n\t\tif(usercredWrapper != null && usercredWrapper.closest('.hidden') == null){\r\n\t\t\tusercredWrapper.classList.remove('hidden');\r\n\t\t\tdocument.getElementById('webauthn_wrapper').classList.add('hidden');\r\n\r\n\t\t\tshowMessage('Passkey login failed, try using your username and password');\r\n\t\t}\r\n\r\n\t\tconsole.log(error);\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport function checkWebauthnAvailable(){\r\n\tif (window.PublicKeyCredential) {\r\n\t\tPublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then((available) => {\r\n\t\t\tif (available) {\r\n\t\t\t\tconsole.log(\"Supported.\");\r\n\t\t\t\twebauthnSupported = true;\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"WebAuthn supported, Platform Authenticator not supported.\");\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.error(\"Something went wrong.\");\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t} else {\r\n\t\tconsole.log(\"Not supported.\");\r\n\t}\r\n}\r\n\r\n// Display the form for the 2fa email or authenticator code\r\nexport function showTwoFaFields(methods){\r\n\tif(methods.includes('email')){\r\n\t\trequestEmailCode();\r\n\t}\r\n\r\n\t//show 2fa fields\r\n\tfor(const element of methods){\r\n\t\tif(element == 'webauthn'){\r\n\t\t\t//do not show webauthn\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar wrapper\t= document.getElementById(element+'_wrapper');\r\n\t\tif(wrapper != null){\r\n\t\t\twrapper.classList.remove('hidden');\r\n\t\t\twrapper.querySelectorAll('input').forEach(el=>window.setTimeout(() => el.focus(), 0));\r\n\t\t}\r\n\t}\r\n\r\n\t//enable login button\r\n\tdocument.querySelector(\"#login_button\").disabled\t\t\t= '';\r\n\t//show login button\r\n\tdocument.querySelector('#submit_login_wrapper').classList.remove('hidden');\r\n}","// Import the registration hook\r\nimport {\r\n    preparePublicKeyCredentials,\r\n    preparePublicKeyOptions,\r\n} from './partials/shared.js';\r\n\r\n\r\nimport {\r\n    checkWebauthnAvailable,\r\n} from './partials/webauth.js';\r\n\r\n\r\n\r\nconsole.log(\"2fa.js loaded\");\r\n\r\nasync function saveTwofaSettings(target){\r\n\t// Show loader\r\n\tlet loader\t= target.closest('.submit_wrapper').querySelector('.loadergif');\r\n\tloader.classList.remove('hidden');\r\n\r\n\tlet form\t\t= target.closest('form');\r\n\r\n\tform.querySelectorAll('.hidden [required], select[required]').forEach(el=>{el.required = false});\r\n\r\n\tlet validity\t= form.reportValidity();\r\n\r\n\tif(validity){\r\n\t\tlet formData\t= new FormData(form);\r\n\t\tlet response \t= await FormSubmit.fetchRestApi('login/save_2fa_settings', formData);\r\n\r\n\t\tif(response){\r\n\t\t\tform.querySelectorAll('[id^=\"setup-\"]:not(.hidden)').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t\t\tMain.displayMessage(response, 'success');\r\n\r\n\t\t\t//Show submit button\r\n\t\t\ttarget.closest('form').querySelector('.form_submit').classList.add('hidden');\r\n\t\t}\r\n\t}\r\n\r\n\tloader.classList.add('hidden');\r\n}\r\n\r\nfunction showTwofaSetup(target) {\r\n\t//hide all options\r\n\tdocument.querySelectorAll('.twofa_option').forEach(el=>el.classList.add('hidden'));\r\n\r\n\t// Show setup for this method\r\n\tvar wrapper\t= document.getElementById('setup-'+target.value);\r\n\twrapper.classList.remove('hidden');\r\n\r\n\tif (Main.isMobileDevice()){\r\n\t\twrapper.querySelectorAll('.mobile.hidden').forEach(el=>el.classList.remove('hidden'));\r\n\t}else{\r\n\t\twrapper.querySelectorAll('.desktop.hidden').forEach(el=>el.classList.remove('hidden'));\r\n\t}\r\n\r\n\tif(target.value == 'authenticator'){\r\n\t\t//Show submit button\r\n\t\ttarget.closest('form').querySelector('.form_submit').classList.remove('hidden');\r\n\t}\r\n}\r\n\r\nasync function removeWebAuthenticator(target){\r\n\tlet table   = target.closest('table');\r\n\tlet row     = target.closest('tr');\r\n\r\n\tlet formData\t= new FormData();\r\n\tformData.append('key',target.dataset.key);\r\n\r\n\tMain.showLoader(target, true);\r\n\r\n\tlet response \t= await FormSubmit.fetchRestApi('login/remove_web_authenticator', formData);\r\n\r\n\tif(response){\r\n\t\tif(table.rows.length==2){\r\n\t\t\ttable.remove();\r\n\t\t}else{\r\n\t\t\trow.remove();\r\n\t\t}\r\n\r\n\t\tMain.displayMessage(response);\r\n\t}\r\n}\r\n\r\n//Start registration with button click\r\nasync function registerBiometric(target){\r\n    let identifier  = target.closest('#webauthn_wrapper').querySelector('[name=\"identifier\"]').value;\r\n    if(identifier == ''){\r\n\t\tMain.displayMessage('Please specify a device name', 'error');\r\n      return;\r\n    }\r\n\r\n    //show loader\r\n    document.getElementById('add_webauthn').classList.add('hidden');\r\n    let loaderHtml = `<div id=\"loader_wrapper\" style='margin-bottom:20px;'><span class=\"message\"></span><img class=\"loadergif\" src=\"${sim.loadingGif}\" height=\"30px;\"></div>`;\r\n    document.getElementById('add_webauthn').insertAdjacentHTML('afterEnd', loaderHtml);\r\n\tlet message\t\t= document.querySelector('#loader_wrapper .message');\r\n\r\n\ttry{\r\n\t\t// Get biometric challenge\r\n\t\tlet formData\t\t\t= new FormData();\r\n\t\tformData.append('identifier', identifier);\r\n\t\tlet response\t\t\t= await FormSubmit.fetchRestApi('login/fingerprint_options', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Options retrieval failed');\r\n\t\t}\r\n\t\tlet publicKey \t\t\t= preparePublicKeyOptions(response);\r\n\r\n\t\t// Update the message\r\n\t\tmessage.textContent  \t= 'Please authenticate...';\r\n\r\n\t\t// Ask user to verify\r\n\t\tlet credentials \t\t= await navigator.credentials.create({publicKey});\r\n\r\n\t\t// Update the message\r\n\t\tmessage.textContent  \t= 'Saving authenticator...';\r\n\r\n\t\t// Store result\r\n\t\tvar publicKeyCredential = preparePublicKeyCredentials(credentials);\r\n\t\t\r\n\t\tformData\t\t\t= new FormData();\r\n\t\tformData.append('publicKeyCredential', JSON.stringify(publicKeyCredential));\r\n\t\tresponse\t\t\t= await FormSubmit.fetchRestApi('login/store_fingerprint', formData);\r\n\t\tif(!response){\r\n\t\t\tthrow new Error('Storing biometric failed');\r\n\t\t}\r\n\r\n\t\tvar wrapper \t\t\t= document.getElementById('webautn_devices_wrapper');\r\n\t\tif(wrapper == null){\r\n\t\t\t//add authenthn table\r\n\t\t\tdocument.getElementById('webauthn_wrapper').insertAdjacentHTML('beforeEnd', response);\r\n\t\t}else{\r\n\t\t\t//update authenthn table\r\n\t\t\twrapper.outerHTML = response;\r\n\t\t}\r\n  \r\n\t\t//labels for use\r\n\t\tSimTableFunctions.setTableLabel();\r\n  \r\n\t\tMain.displayMessage('Registration success');\r\n\t}catch(error){\r\n\t\tdocument.getElementById('add_webauthn').classList.remove('hidden');\r\n\t\tconsole.error(error);\r\n\t\tMain.displayMessage(error, 'error');\r\n\t}\r\n\r\n    document.querySelector('#loader_wrapper').remove();\r\n}\r\n\r\nasync function sendValidationEmail(target){\r\n\t// Request email code for 2fa login setup\r\n\tvar loader\t\t\t\t= `<img id='loader' src='${sim.loadingGif}' style='height:30px;margin-top:-6px;float:right;'>`;\r\n\r\n\tdocument.getElementById('email-message').innerHTML\t= `Sending e-mail... ${loader}`;\r\n\r\n\tvar username\t= document.getElementById('username').value;\r\n\tvar formData\t= new FormData();\r\n\tformData.append('username', username);\r\n\r\n\tvar response\t= await FormSubmit.fetchRestApi('login/request_email_code', formData);\r\n\r\n\tif(response){\r\n\t\tdocument.getElementById('email-message').innerHTML\t= response;\r\n\t\tdocument.getElementById('email-message').classList.add('success');\r\n\r\n\t\tdocument.getElementById('email-code-validation').classList.remove('hidden');\r\n\r\n\t\ttarget.classList.add('hidden');\r\n\r\n\t\t//Show submit button\r\n\t\ttarget.closest('form').querySelector('.form_submit').classList.remove('hidden');\r\n\r\n\t\tdocument.getElementById('email-code-validation').focus();\r\n\t}\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\",function() {\r\n\t//hide the webauthn table if not possible\r\n\tvar el = document.querySelector('#webauthn_wrapper.hidden');\r\n\tif(el != null){\r\n\t\tcheckWebauthnAvailable();\r\n\t}\t\r\n});\r\n\r\ndocument.addEventListener('click', ev =>{\r\n\tvar target = ev.target;\r\n\r\n\tif(target.name == '2fa_methods[]'){\r\n\t\tshowTwofaSetup(target);\r\n\t}\r\n\r\n\tif(target.matches('.remove_webauthn')){\r\n\t\tremoveWebAuthenticator(target);\r\n\t}\r\n\t\r\n\tif(target.id == 'add_fingerprint'){\r\n\t\tregisterBiometric(target);\r\n\t}\r\n\r\n\tif(target.name == 'save2fa'){\r\n\t\tsaveTwofaSettings(target);\r\n\t}\r\n\r\n\tif(target.id == 'email-code-button'){\r\n\t\tsendValidationEmail(target);\r\n\t}\r\n})"],"names":["base64UrlDecode","input","pad","replace","length","Error","Array","join","window","atob","arrayToBase64String","a","btoa","String","fromCharCode","webauthnSupported","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","then","result","console","log","document","addEventListener","querySelector","available","catch","err","error","ev","target","name","querySelectorAll","forEach","el","classList","add","wrapper","getElementById","value","remove","Main","isMobileDevice","closest","showTwofaSetup","matches","async","table","row","formData","FormData","append","dataset","key","showLoader","response","FormSubmit","fetchRestApi","rows","displayMessage","removeWebAuthenticator","id","identifier","loaderHtml","sim","loadingGif","insertAdjacentHTML","message","publicKey","challenge","Uint8Array","from","c","charCodeAt","undefined","user","excludeCredentials","map","data","allowCredentials","textContent","credentials","navigator","create","publicKeyCredential","type","rawId","clientDataJSON","attestationObject","authenticatorData","signature","userHandle","JSON","stringify","outerHTML","SimTableFunctions","setTableLabel","registerBiometric","loader","form","required","reportValidity","saveTwofaSettings","innerHTML","username","focus","sendValidationEmail"],"sourceRoot":""}