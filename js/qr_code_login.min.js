(()=>{"use strict";const e=e=>{const t=(e=e.replace(/-/g,"+").replace(/_/g,"/")).length%4;if(t){if(1===t)throw new Error("InvalidLengthError: Input base64url string is the wrong length to determine padding");e+=new Array(5-t).join("=")}return window.atob(e)},t=e=>btoa(String.fromCharCode(...e));window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then((e=>{e||console.log("No platform authenticator found. If your OS does not come with one, try using devtools to set one up.")})),console.log("Qr code login loaded"),document.addEventListener("DOMContentLoaded",(async function(){await async function(r,n){n.classList.remove("success"),n.classList.remove("error");try{let a=new FormData;a.append("username",r);let o=await FormSubmit.fetchRestApi("login/auth_start",a);if(!o)throw new Error("Fetching Server Challenge failed");let i=(t=>(t.challenge=Uint8Array.from(e(t.challenge),(e=>e.charCodeAt(0))),void 0!==t.user&&(t.user={...t.user,id:Uint8Array.from(window.atob(t.user.id),(e=>e.charCodeAt(0)))}),void 0!==t.excludeCredentials&&(t.excludeCredentials=t.excludeCredentials.map((t=>({...t,id:Uint8Array.from(e(t.id),(e=>e.charCodeAt(0)))})))),void 0!==t.allowCredentials&&(t.allowCredentials=t.allowCredentials.map((t=>({...t,id:Uint8Array.from(e(t.id),(e=>e.charCodeAt(0)))})))),t))(o);null!=n&&(n.textContent="Waiting for biometric");let s=await navigator.credentials.get({publicKey:i});null!=n&&(n.textContent="Verifying...");const l=(e=>{const r={id:e.id,type:e.type,rawId:t(new Uint8Array(e.rawId)),response:{clientDataJSON:t(new Uint8Array(e.response.clientDataJSON))}};return void 0!==e.response.attestationObject&&(r.response.attestationObject=t(new Uint8Array(e.response.attestationObject))),void 0!==e.response.authenticatorData&&(r.response.authenticatorData=t(new Uint8Array(e.response.authenticatorData))),void 0!==e.response.signature&&(r.response.signature=t(new Uint8Array(e.response.signature))),void 0!==e.response.userHandle&&(r.response.userHandle=t(new Uint8Array(e.response.userHandle))),r})(s);if(a=new FormData,a.append("publicKeyCredential",JSON.stringify(l)),o=await FormSubmit.fetchRestApi("login/auth_finish",a),!o)throw new Error("Verification failed");return null!=n&&(n.textContent="Verification successfull",n.classList.add("success")),!0}catch(e){return null!=n&&(n.textContent=e,n.classList.add("error")),!1}}(sim.userId,document.getElementById("message"))&&(location.href=sim.baseUrl+"?message=Login%20succesfully%20aproved"),document.querySelectorAll(".loadergif").forEach((e=>e.classList.add("hidden")))}))})();
//# sourceMappingURL=qr_code_login.min.js.map