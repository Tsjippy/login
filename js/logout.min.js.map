{"version":3,"file":"logout.min.js","mappings":"mBAgBAA,eAAeC,EAAOC,GAClBA,EAAMC,kBACND,EAAME,iBAET,IAAIC,EAASH,EAAMG,OAEnB,GAAGA,EAAOC,QAAQ,WAAW,CCpB7BC,SAASC,iBAAiB,kDAAkDC,SAAQC,GAAIA,EAAGC,UAAUC,OAAO,aAC5GL,SAASM,cAAc,QAAQF,UAAUC,OAAO,oBAChDL,SAASC,iBAAiB,yCAAyCC,SAAQC,GAAIA,EAAGI,aAAe,IDqB1F,IAAIC,EAAYC,KAAKC,WAAWZ,GAAQ,EAAO,GAAI,IAAI,GAEvD,GAAmB,oBAAV,KAAsB,CAC3B,IAAIa,EAAU,CACVC,SAAUJ,EACVK,MAAO,iBACPC,mBAAmB,EACnBC,YAAa,CACTC,KAAM,cAImB,MAA9BhB,SAASiB,oBACRN,EAAgB,OAAIX,SAASiB,mBAGjCC,KAAKC,KAAKR,EACd,CAEA,IAAIS,EAAW,IAAIC,SAEfC,QAAoBC,WAAWC,aAAa,eAAgBJ,GAE7DE,IACCb,KAAKgB,eAAeH,EAAS,WAAW,GAAO,GAG/CI,SAASC,KAAOC,IAAIC,QAE5B,CACJ,CAnDAC,QAAQC,IAAI,oBAGZ/B,SAASgC,iBAAiB,oBAAmB,WAE5ChC,SAASC,iBAAiB,kBAAkBC,SAAQC,IAC7CA,EAAG6B,iBAAiB,QAAStC,GAE7BS,EAAGC,UAAUC,OAAO,SAAS,GAErC,G","sources":["webpack://login/./logout.js","webpack://login/./partials/shared.js"],"sourcesContent":["import {\r\n    closeMobileMenu\r\n} from './partials/shared.js';\r\n\r\nconsole.log(\"logout.js loaded\");\r\n\r\n//Logout user\r\ndocument.addEventListener(\"DOMContentLoaded\",function() {\r\n\r\n\tdocument.querySelectorAll('.logout.hidden').forEach(el=>{\r\n        el.addEventListener('click', logout);\r\n\r\n        el.classList.remove('hidden');\r\n    });\r\n});\r\n\r\nasync function logout(event){\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n\tvar target = event.target;\r\n    \r\n\tif(target.matches(\".logout\")){\r\n        closeMobileMenu();\r\n\r\n        let loader\t\t\t\t= Main.showLoader(target, false, 50, '', true);\r\n\r\n        if(typeof(Swal) != 'undefined'){\r\n            var options = {\r\n                iconHtml: loader,\r\n                title: 'Logging out...',\r\n                showConfirmButton: false,\r\n                customClass: {\r\n                    icon: 'no-border'\r\n                }\r\n            };\r\n            \r\n            if(document.fullscreenElement != null){\r\n                options['target']\t= document.fullscreenElement;\r\n            }\r\n            \r\n            Swal.fire(options);\r\n        }\r\n\r\n        var formData\t= new FormData();\r\n\r\n        var response    = await FormSubmit.fetchRestApi('login/logout', formData);\r\n\r\n        if(response){\r\n            Main.displayMessage(response,'success', false, true);\r\n\r\n            //redirect to homepage\r\n            location.href\t= sim.baseUrl;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","export function closeMobileMenu(){\r\n\t//close mobile menu\r\n\tdocument.querySelectorAll('#site-navigation, #mobile-menu-control-wrapper').forEach(el=>el.classList.remove('toggled'));\r\n\tdocument.querySelector('body').classList.remove('mobile-menu-open');\r\n\tdocument.querySelectorAll(\"#mobile-menu-control-wrapper > button\").forEach(el=>el.ariaExpanded = 0);\r\n}\r\n\r\n// Decodes a Base64Url string\r\nconst base64UrlDecode = (input) => {\r\ninput = input\r\n\t.replace(/-/g, '+')\r\n\t.replace(/_/g, '/');\r\n\r\nconst pad = input.length % 4;\r\nif (pad) {\r\n\tif (pad === 1) {\r\n\tthrow new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\r\n\t}\r\n\tinput += new Array(5-pad).join('=');\r\n}\r\n\r\nreturn window.atob(input);\r\n};\r\n\r\n// Converts an array of bytes into a Base64Url string\r\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\r\n\r\n// Prepares the public key options object returned by the Webauthn Framework\r\nexport const preparePublicKeyOptions = publicKey => {\r\n\t//Convert challenge from Base64Url string to Uint8Array\r\n\tpublicKey.challenge = Uint8Array.from(\r\n\t\tbase64UrlDecode(publicKey.challenge),\r\n\t\tc => c.charCodeAt(0)\r\n\t);\r\n\r\n\t//Convert the user ID from Base64 string to Uint8Array\r\n\tif (publicKey.user !== undefined) {\r\n\t\tpublicKey.user = {\r\n\t\t...publicKey.user,\r\n\t\tid: Uint8Array.from(\r\n\t\t\twindow.atob(publicKey.user.id),\r\n\t\t\tc => c.charCodeAt(0)\r\n\t\t),\r\n\t\t};\r\n\t}\r\n\r\n\t//If excludeCredentials is defined, we convert all IDs to Uint8Array\r\n\tif (publicKey.excludeCredentials !== undefined) {\r\n\t\tpublicKey.excludeCredentials = publicKey.excludeCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif (publicKey.allowCredentials !== undefined) {\r\n\t\tpublicKey.allowCredentials = publicKey.allowCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKey;\r\n};\r\n\r\n// Prepares the public key credentials object returned by the authenticator\r\nexport const preparePublicKeyCredentials = data => {\r\n\tconst publicKeyCredential = {\r\n\t\tid: data.id,\r\n\t\ttype: data.type,\r\n\t\trawId: arrayToBase64String(new Uint8Array(data.rawId)),\r\n\t\tresponse: {\r\n\t\tclientDataJSON: arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.clientDataJSON)\r\n\t\t),\r\n\t\t},\r\n\t};\r\n\r\n\tif (data.response.attestationObject !== undefined) {\r\n\t\tpublicKeyCredential.response.attestationObject = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.attestationObject)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.authenticatorData !== undefined) {\r\n\t\tpublicKeyCredential.response.authenticatorData = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.authenticatorData)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.signature !== undefined) {\r\n\t\tpublicKeyCredential.response.signature = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.signature)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.userHandle !== undefined) {\r\n\t\tpublicKeyCredential.response.userHandle = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.userHandle)\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKeyCredential;\r\n};\r\n\r\nexport function showMessage(message, type=''){\r\n\tlet el = document.querySelector(\"#message\");\r\n\tel.innerHTML= DOMPurify.sanitize(message);\r\n\r\n\tel.classList.remove('success');\r\n\tel.classList.remove('warning');\r\n\tel.classList.remove('error');\r\n\r\n\tif(type == 'success'){\r\n\t\tel.classList.add('success');\r\n\t}\r\n\r\n\tif(type == 'warning'){\r\n\t\tel.classList.add('warning');\r\n\t}\r\n\r\n\tif(type == 'error'){\r\n\t\tel.classList.add('error');\r\n\t}\r\n}\r\n\r\nexport function togglePassworView(ev){\r\n\tvar target\t= ev.target;\r\n\r\n\tif(ev.target.tagName == 'IMG'){\r\n\t\ttarget\t= ev.target.parentNode;\r\n\t}\r\n\r\n\tif(target.dataset.toggle == '0'){\r\n\t\ttarget.title\t\t\t\t\t\t\t\t= 'Hide password';\r\n\t\ttarget.dataset.toggle\t\t\t\t\t\t= '1';\r\n\t\ttarget.innerHTML\t\t\t\t\t\t\t= target.innerHTML.replace('invisible', 'visible');\r\n\t\ttarget.closest('.password').querySelector('input[type=\"password\"]').type\t= 'text';\r\n\t}else{\r\n\t\ttarget.title\t\t\t\t\t\t\t\t= 'Show password';\r\n\t\ttarget.dataset.toggle\t\t\t\t\t\t= '0';\r\n\t\ttarget.innerHTML\t\t\t\t\t\t\t= target.innerHTML.replace('visible', 'invisible');\r\n\t\ttarget.closest('.password').querySelector('input[type=\"text\"]').type\t= 'password';\r\n\t}\r\n}"],"names":["async","logout","event","stopPropagation","preventDefault","target","matches","document","querySelectorAll","forEach","el","classList","remove","querySelector","ariaExpanded","loader","Main","showLoader","options","iconHtml","title","showConfirmButton","customClass","icon","fullscreenElement","Swal","fire","formData","FormData","response","FormSubmit","fetchRestApi","displayMessage","location","href","sim","baseUrl","console","log","addEventListener"],"sourceRoot":""}