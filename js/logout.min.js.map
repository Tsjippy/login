{"version":3,"file":"logout.min.js","mappings":"mBAgBAA,eAAeC,EAAOC,GAMrB,GALGA,EAAMC,kBACND,EAAME,iBAEIF,EAAMG,OAETC,QAAQ,WAAW,CAGtB,GCvBPC,SAASC,iBAAiB,kDAAkDC,SAAQC,GAAIA,EAAGC,UAAUC,OAAO,aAC5GL,SAASM,cAAc,QAAQF,UAAUC,OAAO,oBAChDL,SAASC,iBAAiB,yCAAyCC,SAAQC,GAAIA,EAAGI,aAAe,UDqBvE,oBAAV,KAAsB,CAC3B,IAAIC,EAAU,CACVC,SAAU,aAAaC,IAAIC,WAAW,KACtCC,MAAO,iBACPC,mBAAmB,EACnBC,YAAa,CACTC,KAAM,cAImB,MAA9Bf,SAASgB,oBACRR,EAAgB,OAAIR,SAASgB,mBAGjCC,KAAKC,KAAKV,EACd,CAEA,IAAIW,EAAW,IAAIC,SAEfC,QAAoBC,WAAWC,aAAa,eAAgBJ,GAE7DE,IACCG,KAAKC,eAAeJ,EAAS,WAAW,GAAO,GAG/CK,SAASC,KAAOjB,IAAIkB,QAE5B,CACJ,CAjDAC,QAAQC,IAAI,oBAGZ9B,SAAS+B,iBAAiB,oBAAmB,WAE5C/B,SAASC,iBAAiB,kBAAkBC,SAAQC,IAC7CA,EAAG4B,iBAAiB,QAASrC,GAE7BS,EAAGC,UAAUC,OAAO,SAAS,GAErC,G","sources":["webpack://login/./logout.js","webpack://login/./partials/shared.js"],"sourcesContent":["import {\r\n    closeMobileMenu\r\n} from './partials/shared.js';\r\n\r\nconsole.log(\"logout.js loaded\");\r\n\r\n//Logout user\r\ndocument.addEventListener(\"DOMContentLoaded\",function() {\r\n\r\n\tdocument.querySelectorAll('.logout.hidden').forEach(el=>{\r\n        el.addEventListener('click', logout);\r\n\r\n        el.classList.remove('hidden');\r\n    });\r\n});\r\n\r\nasync function logout(event){\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n\tvar target = event.target;\r\n    \r\n\tif(target.matches(\".logout\")){\r\n        closeMobileMenu();\r\n\r\n        if(typeof(Swal) != 'undefined'){\r\n            var options = {\r\n                iconHtml: '<img src=\"'+sim.loadingGif+'\">',\r\n                title: 'Logging out...',\r\n                showConfirmButton: false,\r\n                customClass: {\r\n                    icon: 'no-border'\r\n                }\r\n            };\r\n            \r\n            if(document.fullscreenElement != null){\r\n                options['target']\t= document.fullscreenElement;\r\n            }\r\n            \r\n            Swal.fire(options);\r\n        }\r\n\r\n        var formData\t= new FormData();\r\n\r\n        var response    = await FormSubmit.fetchRestApi('login/logout', formData);\r\n\r\n        if(response){\r\n            Main.displayMessage(response,'success', false, true);\r\n\r\n            //redirect to homepage\r\n            location.href\t= sim.baseUrl;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","export function closeMobileMenu(){\r\n\t//close mobile menu\r\n\tdocument.querySelectorAll('#site-navigation, #mobile-menu-control-wrapper').forEach(el=>el.classList.remove('toggled'));\r\n\tdocument.querySelector('body').classList.remove('mobile-menu-open');\r\n\tdocument.querySelectorAll(\"#mobile-menu-control-wrapper > button\").forEach(el=>el.ariaExpanded = 'false');\r\n}\r\n\r\n// Decodes a Base64Url string\r\nconst base64UrlDecode = (input) => {\r\ninput = input\r\n\t.replace(/-/g, '+')\r\n\t.replace(/_/g, '/');\r\n\r\nconst pad = input.length % 4;\r\nif (pad) {\r\n\tif (pad === 1) {\r\n\tthrow new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\r\n\t}\r\n\tinput += new Array(5-pad).join('=');\r\n}\r\n\r\nreturn window.atob(input);\r\n};\r\n\r\n// Converts an array of bytes into a Base64Url string\r\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\r\n\r\n// Prepares the public key options object returned by the Webauthn Framework\r\nexport const preparePublicKeyOptions = publicKey => {\r\n\t//Convert challenge from Base64Url string to Uint8Array\r\n\tpublicKey.challenge = Uint8Array.from(\r\n\t\tbase64UrlDecode(publicKey.challenge),\r\n\t\tc => c.charCodeAt(0)\r\n\t);\r\n\r\n\t//Convert the user ID from Base64 string to Uint8Array\r\n\tif (publicKey.user !== undefined) {\r\n\t\tpublicKey.user = {\r\n\t\t...publicKey.user,\r\n\t\tid: Uint8Array.from(\r\n\t\t\twindow.atob(publicKey.user.id),\r\n\t\t\tc => c.charCodeAt(0)\r\n\t\t),\r\n\t\t};\r\n\t}\r\n\r\n\t//If excludeCredentials is defined, we convert all IDs to Uint8Array\r\n\tif (publicKey.excludeCredentials !== undefined) {\r\n\t\tpublicKey.excludeCredentials = publicKey.excludeCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif (publicKey.allowCredentials !== undefined) {\r\n\t\tpublicKey.allowCredentials = publicKey.allowCredentials.map(\r\n\t\t\tdata => {\r\n\t\t\treturn {\r\n\t\t\t\t...data,\r\n\t\t\t\tid: Uint8Array.from(\r\n\t\t\t\t\tbase64UrlDecode(data.id),\r\n\t\t\t\t\tc => c.charCodeAt(0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKey;\r\n};\r\n\r\n// Prepares the public key credentials object returned by the authenticator\r\nexport const preparePublicKeyCredentials = data => {\r\n\tconst publicKeyCredential = {\r\n\t\tid: data.id,\r\n\t\ttype: data.type,\r\n\t\trawId: arrayToBase64String(new Uint8Array(data.rawId)),\r\n\t\tresponse: {\r\n\t\tclientDataJSON: arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.clientDataJSON)\r\n\t\t),\r\n\t\t},\r\n\t};\r\n\r\n\tif (data.response.attestationObject !== undefined) {\r\n\t\tpublicKeyCredential.response.attestationObject = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.attestationObject)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.authenticatorData !== undefined) {\r\n\t\tpublicKeyCredential.response.authenticatorData = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.authenticatorData)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.signature !== undefined) {\r\n\t\tpublicKeyCredential.response.signature = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.signature)\r\n\t\t);\r\n\t}\r\n\r\n\tif (data.response.userHandle !== undefined) {\r\n\t\tpublicKeyCredential.response.userHandle = arrayToBase64String(\r\n\t\t\tnew Uint8Array(data.response.userHandle)\r\n\t\t);\r\n\t}\r\n\r\n\treturn publicKeyCredential;\r\n};\r\n\r\nexport function showMessage(message){\r\n\tdocument.querySelector(\"#message\").innerHTML= DOMPurify.sanitize(message);\r\n}\r\n\r\n//show loader\r\nexport async function requestLogin(){\r\n\t//hide everything\r\n\tdocument.querySelectorAll('.authenticator_wrapper:not(.hidden)').forEach(el=>{\r\n\t\tel.classList.add('hidden');\r\n\t\tel.classList.add('current-method');\r\n\t});\r\n\t\r\n\t//show login message\r\n\tdocument.getElementById('logging_in_wrapper').classList.remove('hidden');\r\n\r\n\tlet form \t\t= document.getElementById('loginform');\r\n\tlet formData\t= new FormData(form);\r\n\tform.querySelectorAll('.hidden [required]').forEach(el=>{el.required = false});\r\n\tlet validity\t= form.reportValidity();\r\n\t//if not valid return\r\n\tif(!validity){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tawait Main.waitForInternet();\r\n\r\n\tlet response\t= await FormSubmit.fetchRestApi('login/request_login', formData);\r\n\r\n\tif(response){\r\n\t\tconsole.log(response);\r\n\t\t// We are logging in from an iframe\r\n\t\tif(window.self !== window.top){\r\n\r\n\t\t\t// change message\r\n\t\t\tconsole.log(window.parent.document.getElementById('iframe-loader'));\r\n\t\t\tconsole.log(window.parent.document);\r\n\t\t\tconsole.log(window.parent);\r\n\t\t\twindow.parent.document.getElementById('iframe-loader').textContent\t= 'Succesfully logged in, you may now close this popup';\r\n\r\n\t\t\t// Refresh the rest api nonce\r\n\t\t\twindow.parent.sim.restNonce\t= response.nonce;\r\n\r\n\t\t\t// Update user id\r\n\t\t\twindow.parent.sim.userId\t= response.id;\r\n\r\n\t\t\tconsole.log(window.parent.document.getElementById('iframe-loader'));\r\n\r\n\t\t\t// close all iframes\r\n\t\t\twindow.parent.document.querySelectorAll('iframe').forEach(el=>el.remove());\r\n\t\t}else{\r\n\t\t\tdocument.querySelector('#logging_in_wrapper .status_message').textContent='Succesfully logged in, redirecting...';\r\n\r\n\t\t\tif(response.redirect == ''){\r\n\t\t\t\t// refresh the page\r\n\t\t\t\tlocation.reload();\r\n\t\t\t}else{\r\n\t\t\t\t// go to the redirect page\r\n\t\t\t\tlocation.href = response.redirect;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}else{\r\n\t\tdocument.getElementById('logging_in_wrapper').classList.add('hidden');\r\n\r\n\t\tdocument.querySelector('.current-method').classList.remove('hidden');\r\n\r\n\t\treturn false;\r\n\t}\r\n}"],"names":["async","logout","event","stopPropagation","preventDefault","target","matches","document","querySelectorAll","forEach","el","classList","remove","querySelector","ariaExpanded","options","iconHtml","sim","loadingGif","title","showConfirmButton","customClass","icon","fullscreenElement","Swal","fire","formData","FormData","response","FormSubmit","fetchRestApi","Main","displayMessage","location","href","baseUrl","console","log","addEventListener"],"sourceRoot":""}